# Copyright 2011,2012,2016,2018,2019 Free Software Foundation, Inc.
#
# This file was generated by gr_modtool, a tool from the GNU Radio framework
# This file is a part of gr-meteor
#
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.

########################################################################
# Setup library
########################################################################
include(GrPlatform) #define LIB_SUFFIX

include_directories(
  ${Protobuf_INCLUDE_DIRS}
  ${CMAKE_CURRENT_SOURCE_DIR}/../cqueue/
)

########################################################################
# Generate Protobuf sources
########################################################################
# {Protobuf,PROTOBUF}_FOUND is defined based on find_package type ("MODULE" vs "CONFIG").
# For "MODULE", the case has also changed between cmake 3.5 and 3.6.
# We use the legacy uppercase version for *_LIBRARIES AND *_INCLUDE_DIRS variables
# as newer cmake versions provide them too for backward compatibility.
if(Protobuf_FOUND OR PROTOBUF_FOUND)
  if(TARGET protobuf::libprotobuf)
    set(_PROTOBUF_LIBPROTOBUF protobuf::libprotobuf)
  else()
    set(_PROTOBUF_LIBPROTOBUF ${PROTOBUF_LIBRARIES})
    include_directories(${PROTOBUF_INCLUDE_DIRS})
  endif()
  if(TARGET protobuf::protoc)
    set(_PROTOBUF_PROTOC $<TARGET_FILE:protobuf::protoc>)
  else()
    set(_PROTOBUF_PROTOC ${PROTOBUF_PROTOC_EXECUTABLE})
  endif()
else()
  message(WARNING "Failed to locate libprotobuf and protoc!")
endif()

get_filename_component(hw_proto "${CMAKE_CURRENT_SOURCE_DIR}/../api/meteor.proto" ABSOLUTE)

protobuf_generate_cpp(hw_proto_srcs hw_proto_hdrs "${hw_proto}")


list(APPEND meteor_sources
    ${CMAKE_CURRENT_SOURCE_DIR}/../cqueue/string_queue.cc
    ${hw_proto_srcs}
    pmt_to_proto.cc

    meteor/meteor_correlator.cc
    meteor/meteor_decoder.cc
    meteor/meteor_viterbi.cc
    meteor/meteor_bit_io.cc
    meteor/meteor_ecc.cc
    meteor/meteor_packet.cc
    meteor/meteor_image.cc
    gil_util.cc
    meteor_decoder_sink_impl.cc

)

set(meteor_sources "${meteor_sources}" PARENT_SCOPE)
if(NOT meteor_sources)
    MESSAGE(STATUS "No C++ sources... skipping lib/")
    return()
endif(NOT meteor_sources)

add_library(gnuradio-meteor SHARED ${meteor_sources})
target_link_libraries(gnuradio-meteor
    gnuradio::gnuradio-runtime
    ${_PROTOBUF_LIBPROTOBUF}
    ${PNG_LIBRARIES}
)
    
target_include_directories(gnuradio-meteor
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
    PUBLIC $<INSTALL_INTERFACE:include>
  )
set_target_properties(gnuradio-meteor PROPERTIES DEFINE_SYMBOL "gnuradio_meteor_EXPORTS")

if(APPLE)
    set_target_properties(gnuradio-meteor PROPERTIES
        INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/lib"
    )
endif(APPLE)

########################################################################
# Install built library files
########################################################################
include(GrMiscUtils)
GR_LIBRARY_FOO(gnuradio-meteor RUNTIME_COMPONENT "meteor_runtime" DEVEL_COMPONENT "meteor_devel")

########################################################################
# Print summary
########################################################################
message(STATUS "Using install prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "Building for version: ${VERSION} / ${LIBVER}")

########################################################################
# Build and register unit test
########################################################################
include(GrTest)

configure_file(
${CMAKE_CURRENT_SOURCE_DIR}/test_meteor_stream.s
${CMAKE_CURRENT_BINARY_DIR}/test_meteor_stream.s
COPYONLY
)

configure_file(
${CMAKE_CURRENT_SOURCE_DIR}/test_meteor_image.png
${CMAKE_CURRENT_BINARY_DIR}/test_meteor_image.png
COPYONLY
)

configure_file(
${CMAKE_CURRENT_SOURCE_DIR}/test_meteor_image_68.png
${CMAKE_CURRENT_BINARY_DIR}/test_meteor_image_68.png
COPYONLY
)

configure_file(
${CMAKE_CURRENT_SOURCE_DIR}/test_meteor_image_65.png
${CMAKE_CURRENT_BINARY_DIR}/test_meteor_image_65.png
COPYONLY
)

configure_file(
${CMAKE_CURRENT_SOURCE_DIR}/test_meteor_image_64.png
${CMAKE_CURRENT_BINARY_DIR}/test_meteor_image_64.png
COPYONLY
)

# List all files that contain Boost.UTF unit tests here
list(APPEND test_meteor_sources
    ${CMAKE_CURRENT_SOURCE_DIR}/test_meteor.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/qa_meteor.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/qa_meteor_decoder.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/../cqueue/string_queue.cc
    meteor/meteor_correlator.cc
    meteor/meteor_decoder.cc
    meteor/meteor_viterbi.cc
    meteor/meteor_bit_io.cc
    meteor/meteor_ecc.cc
    meteor/meteor_packet.cc
    meteor/meteor_image.cc
    gil_util.cc
)

add_executable(test-meteor ${test_meteor_sources})

# Anything we need to link to for the unit tests go here
list(APPEND GR_TEST_TARGET_DEPS gnuradio-meteor)

target_link_libraries(
  test-meteor
  ${GNURADIO_RUNTIME_LIBRARIES}
  ${CPPUNIT_LIBRARIES}
  gnuradio-meteor
  ${PYTHON_LIBRARIES}
)


set(GR_TEST_PYTHON_DIRS ${CMAKE_BINARY_DIR}/swig)

GR_ADD_TEST(test_meteor test-meteor)

if(NOT test_meteor_sources)
    MESSAGE(STATUS "No C++ unit tests... skipping")
    return()
endif(NOT test_meteor_sources)
